// Generated by Xata Codegen 0.26.6. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "products",
    columns: [
      { name: "title", type: "string", notNull: true, defaultValue: "name" },
      {
        name: "description",
        type: "text",
        notNull: true,
        defaultValue: "description",
      },
      { name: "category", type: "link", link: { table: "categories" } },
      { name: "coverImage", type: "file" },
      { name: "price", type: "int", notNull: true, defaultValue: "0" },
    ],
  },
  {
    name: "categories",
    columns: [
      {
        name: "category",
        type: "string",
        notNull: true,
        defaultValue: "default",
      },
    ],
    revLinks: [{ column: "category", table: "products" }],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Products = InferredTypes["products"];
export type ProductsRecord = Products & XataRecord;

export type Categories = InferredTypes["categories"];
export type CategoriesRecord = Categories & XataRecord;

export type DatabaseSchema = {
  products: ProductsRecord;
  categories: CategoriesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://ameneses67-s-workspace-cge9n8.us-east-1.xata.sh/db/saris",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
